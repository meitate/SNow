State 0:
## Known stack suffix:
##
## LR(1) items:
prgm' -> . prgm [ # ]
## Transitions:
-- On HAN shift to state 1
-- On FUN shift to state 163
-- On prgm shift to state 172
-- On decls shift to state 173
## Reductions:
-- On EOF
--   reduce production decls ->

State 1:
## Known stack suffix:
## HAN
## LR(1) items:
decls -> HAN . bndl NAME prms blck decls [ EOF ]
## Transitions:
-- On LANGLE shift to state 2
-- On bndl shift to state 9
## Reductions:

State 2:
## Known stack suffix:
## LANGLE
## LR(1) items:
bndl -> LANGLE . NAME bndlc RANGLE [ NAME ]
## Transitions:
-- On NAME shift to state 3
## Reductions:

State 3:
## Known stack suffix:
## LANGLE NAME
## LR(1) items:
bndl -> LANGLE NAME . bndlc RANGLE [ NAME ]
## Transitions:
-- On COMMA shift to state 4
-- On bndlc shift to state 7
## Reductions:
-- On RANGLE
--   reduce production bndlc ->

State 4:
## Known stack suffix:
## COMMA
## LR(1) items:
bndlc -> COMMA . NAME bndlc [ RANGLE ]
## Transitions:
-- On NAME shift to state 5
## Reductions:

State 5:
## Known stack suffix:
## COMMA NAME
## LR(1) items:
bndlc -> COMMA NAME . bndlc [ RANGLE ]
## Transitions:
-- On COMMA shift to state 4
-- On bndlc shift to state 6
## Reductions:
-- On RANGLE
--   reduce production bndlc ->

State 6:
## Known stack suffix:
## COMMA NAME bndlc
## LR(1) items:
bndlc -> COMMA NAME bndlc . [ RANGLE ]
## Transitions:
## Reductions:
-- On RANGLE
--   reduce production bndlc -> COMMA NAME bndlc

State 7:
## Known stack suffix:
## LANGLE NAME bndlc
## LR(1) items:
bndl -> LANGLE NAME bndlc . RANGLE [ NAME ]
## Transitions:
-- On RANGLE shift to state 8
## Reductions:

State 8:
## Known stack suffix:
## LANGLE NAME bndlc RANGLE
## LR(1) items:
bndl -> LANGLE NAME bndlc RANGLE . [ NAME ]
## Transitions:
## Reductions:
-- On NAME
--   reduce production bndl -> LANGLE NAME bndlc RANGLE

State 9:
## Known stack suffix:
## HAN bndl
## LR(1) items:
decls -> HAN bndl . NAME prms blck decls [ EOF ]
## Transitions:
-- On NAME shift to state 10
## Reductions:

State 10:
## Known stack suffix:
## HAN bndl NAME
## LR(1) items:
decls -> HAN bndl NAME . prms blck decls [ EOF ]
## Transitions:
-- On LPAREN shift to state 11
-- On prms shift to state 27
## Reductions:

State 11:
## Known stack suffix:
## LPAREN
## LR(1) items:
prms -> LPAREN . RPAREN [ LBRACE COLON ]
prms -> LPAREN . NAME COLON vtyp prmsc RPAREN [ LBRACE COLON ]
## Transitions:
-- On RPAREN shift to state 12
-- On NAME shift to state 13
## Reductions:

State 12:
## Known stack suffix:
## LPAREN RPAREN
## LR(1) items:
prms -> LPAREN RPAREN . [ LBRACE COLON ]
## Transitions:
## Reductions:
-- On LBRACE COLON
--   reduce production prms -> LPAREN RPAREN

State 13:
## Known stack suffix:
## LPAREN NAME
## LR(1) items:
prms -> LPAREN NAME . COLON vtyp prmsc RPAREN [ LBRACE COLON ]
## Transitions:
-- On COLON shift to state 14
## Reductions:

State 14:
## Known stack suffix:
## LPAREN NAME COLON
## LR(1) items:
prms -> LPAREN NAME COLON . vtyp prmsc RPAREN [ LBRACE COLON ]
## Transitions:
-- On UNIT shift to state 15
-- On STRING shift to state 16
-- On INT shift to state 17
-- On BOOL shift to state 18
-- On vtyp shift to state 19
## Reductions:

State 15:
## Known stack suffix:
## UNIT
## LR(1) items:
vtyp -> UNIT . [ RPAREN LARROW EQUALS COMMA ]
## Transitions:
## Reductions:
-- On RPAREN LARROW EQUALS COMMA
--   reduce production vtyp -> UNIT

State 16:
## Known stack suffix:
## STRING
## LR(1) items:
vtyp -> STRING . [ RPAREN LARROW EQUALS COMMA ]
## Transitions:
## Reductions:
-- On RPAREN LARROW EQUALS COMMA
--   reduce production vtyp -> STRING

State 17:
## Known stack suffix:
## INT
## LR(1) items:
vtyp -> INT . [ RPAREN LARROW EQUALS COMMA ]
## Transitions:
## Reductions:
-- On RPAREN LARROW EQUALS COMMA
--   reduce production vtyp -> INT

State 18:
## Known stack suffix:
## BOOL
## LR(1) items:
vtyp -> BOOL . [ RPAREN LARROW EQUALS COMMA ]
## Transitions:
## Reductions:
-- On RPAREN LARROW EQUALS COMMA
--   reduce production vtyp -> BOOL

State 19:
## Known stack suffix:
## LPAREN NAME COLON vtyp
## LR(1) items:
prms -> LPAREN NAME COLON vtyp . prmsc RPAREN [ LBRACE COLON ]
## Transitions:
-- On COMMA shift to state 20
-- On prmsc shift to state 25
## Reductions:
-- On RPAREN
--   reduce production prmsc ->

State 20:
## Known stack suffix:
## COMMA
## LR(1) items:
prmsc -> COMMA . NAME COLON vtyp prmsc [ RPAREN ]
## Transitions:
-- On NAME shift to state 21
## Reductions:

State 21:
## Known stack suffix:
## COMMA NAME
## LR(1) items:
prmsc -> COMMA NAME . COLON vtyp prmsc [ RPAREN ]
## Transitions:
-- On COLON shift to state 22
## Reductions:

State 22:
## Known stack suffix:
## COMMA NAME COLON
## LR(1) items:
prmsc -> COMMA NAME COLON . vtyp prmsc [ RPAREN ]
## Transitions:
-- On UNIT shift to state 15
-- On STRING shift to state 16
-- On INT shift to state 17
-- On BOOL shift to state 18
-- On vtyp shift to state 23
## Reductions:

State 23:
## Known stack suffix:
## COMMA NAME COLON vtyp
## LR(1) items:
prmsc -> COMMA NAME COLON vtyp . prmsc [ RPAREN ]
## Transitions:
-- On COMMA shift to state 20
-- On prmsc shift to state 24
## Reductions:
-- On RPAREN
--   reduce production prmsc ->

State 24:
## Known stack suffix:
## COMMA NAME COLON vtyp prmsc
## LR(1) items:
prmsc -> COMMA NAME COLON vtyp prmsc . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production prmsc -> COMMA NAME COLON vtyp prmsc

State 25:
## Known stack suffix:
## LPAREN NAME COLON vtyp prmsc
## LR(1) items:
prms -> LPAREN NAME COLON vtyp prmsc . RPAREN [ LBRACE COLON ]
## Transitions:
-- On RPAREN shift to state 26
## Reductions:

State 26:
## Known stack suffix:
## LPAREN NAME COLON vtyp prmsc RPAREN
## LR(1) items:
prms -> LPAREN NAME COLON vtyp prmsc RPAREN . [ LBRACE COLON ]
## Transitions:
## Reductions:
-- On LBRACE COLON
--   reduce production prms -> LPAREN NAME COLON vtyp prmsc RPAREN

State 27:
## Known stack suffix:
## HAN bndl NAME prms
## LR(1) items:
decls -> HAN bndl NAME prms . blck decls [ EOF ]
## Transitions:
-- On LBRACE shift to state 28
-- On blck shift to state 162
## Reductions:

State 28:
## Known stack suffix:
## LBRACE
## LR(1) items:
blck -> LBRACE . stmt [ RBRACE OTHERWISE HAN FUN EOF BAR ]
## Transitions:
-- On WHEN shift to state 29
-- On STOP shift to state 75
-- On START shift to state 78
-- On SEND shift to state 97
-- On SELECT shift to state 102
-- On RECEIVE shift to state 107
-- On OPEN shift to state 114
-- On NOW shift to state 119
-- On LET shift to state 125
-- On HANDLE shift to state 130
-- On CLOSE shift to state 142
-- On AWAIT shift to state 145
-- On stmt shift to state 161
## Reductions:

State 29:
## Known stack suffix:
## WHEN
## LR(1) items:
stmt -> WHEN . expn DO blck OTHERWISE blck RBRACE [ RBRACE OTHERWISE HAN FUN EOF BAR ]
## Transitions:
-- On TRUE shift to state 30
-- On TEXT shift to state 31
-- On NUMBER shift to state 32
-- On NOT shift to state 33
-- On NAME shift to state 34
-- On LPAREN shift to state 37
-- On IF shift to state 38
-- On FALSE shift to state 39
-- On expn shift to state 69
## Reductions:

State 30:
## Known stack suffix:
## TRUE
## LR(1) items:
expn -> TRUE . [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
## Transitions:
## Reductions:
-- On TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO
--   reduce production expn -> TRUE

State 31:
## Known stack suffix:
## TEXT
## LR(1) items:
expn -> TEXT . [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
## Transitions:
## Reductions:
-- On TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO
--   reduce production expn -> TEXT

State 32:
## Known stack suffix:
## NUMBER
## LR(1) items:
expn -> NUMBER . [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
## Transitions:
## Reductions:
-- On TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO
--   reduce production expn -> NUMBER

State 33:
## Known stack suffix:
## NOT
## LR(1) items:
expn -> NOT . expn [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
## Transitions:
-- On TRUE shift to state 30
-- On TEXT shift to state 31
-- On NUMBER shift to state 32
-- On NOT shift to state 33
-- On NAME shift to state 34
-- On LPAREN shift to state 37
-- On IF shift to state 38
-- On FALSE shift to state 39
-- On expn shift to state 68
## Reductions:

State 34:
## Known stack suffix:
## NAME
## LR(1) items:
expn -> NAME . [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
expn -> NAME . expns [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
## Transitions:
-- On LPAREN shift to state 35
-- On expns shift to state 67
## Reductions:
-- On TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO
--   reduce production expn -> NAME

State 35:
## Known stack suffix:
## LPAREN
## LR(1) items:
expns -> LPAREN . RPAREN [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
expns -> LPAREN . expn expnsc RPAREN [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
## Transitions:
-- On TRUE shift to state 30
-- On TEXT shift to state 31
-- On RPAREN shift to state 36
-- On NUMBER shift to state 32
-- On NOT shift to state 33
-- On NAME shift to state 34
-- On LPAREN shift to state 37
-- On IF shift to state 38
-- On FALSE shift to state 39
-- On expn shift to state 61
## Reductions:

State 36:
## Known stack suffix:
## LPAREN RPAREN
## LR(1) items:
expns -> LPAREN RPAREN . [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
## Transitions:
## Reductions:
-- On TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO
--   reduce production expns -> LPAREN RPAREN

State 37:
## Known stack suffix:
## LPAREN
## LR(1) items:
expn -> LPAREN . expn RPAREN [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
## Transitions:
-- On TRUE shift to state 30
-- On TEXT shift to state 31
-- On NUMBER shift to state 32
-- On NOT shift to state 33
-- On NAME shift to state 34
-- On LPAREN shift to state 37
-- On IF shift to state 38
-- On FALSE shift to state 39
-- On expn shift to state 59
## Reductions:

State 38:
## Known stack suffix:
## IF
## LR(1) items:
expn -> IF . expn THEN expn ELSE expn [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
## Transitions:
-- On TRUE shift to state 30
-- On TEXT shift to state 31
-- On NUMBER shift to state 32
-- On NOT shift to state 33
-- On NAME shift to state 34
-- On LPAREN shift to state 37
-- On IF shift to state 38
-- On FALSE shift to state 39
-- On expn shift to state 40
## Reductions:

State 39:
## Known stack suffix:
## FALSE
## LR(1) items:
expn -> FALSE . [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
## Transitions:
## Reductions:
-- On TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO
--   reduce production expn -> FALSE

State 40:
## Known stack suffix:
## IF expn
## LR(1) items:
expn -> expn . LESSEQ expn [ TIMES THEN PLUS ORELSE MINUS LESSEQ EQUALS ANDALSO ]
expn -> expn . EQUALS expn [ TIMES THEN PLUS ORELSE MINUS LESSEQ EQUALS ANDALSO ]
expn -> expn . PLUS expn [ TIMES THEN PLUS ORELSE MINUS LESSEQ EQUALS ANDALSO ]
expn -> expn . MINUS expn [ TIMES THEN PLUS ORELSE MINUS LESSEQ EQUALS ANDALSO ]
expn -> expn . TIMES expn [ TIMES THEN PLUS ORELSE MINUS LESSEQ EQUALS ANDALSO ]
expn -> expn . ANDALSO expn [ TIMES THEN PLUS ORELSE MINUS LESSEQ EQUALS ANDALSO ]
expn -> expn . ORELSE expn [ TIMES THEN PLUS ORELSE MINUS LESSEQ EQUALS ANDALSO ]
expn -> IF expn . THEN expn ELSE expn [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
## Transitions:
-- On TIMES shift to state 41
-- On THEN shift to state 43
-- On PLUS shift to state 45
-- On ORELSE shift to state 47
-- On MINUS shift to state 49
-- On LESSEQ shift to state 51
-- On EQUALS shift to state 53
-- On ANDALSO shift to state 55
## Reductions:

State 41:
## Known stack suffix:
## expn TIMES
## LR(1) items:
expn -> expn TIMES . expn [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
## Transitions:
-- On TRUE shift to state 30
-- On TEXT shift to state 31
-- On NUMBER shift to state 32
-- On NOT shift to state 33
-- On NAME shift to state 34
-- On LPAREN shift to state 37
-- On IF shift to state 38
-- On FALSE shift to state 39
-- On expn shift to state 42
## Reductions:

State 42:
## Known stack suffix:
## expn TIMES expn
## LR(1) items:
expn -> expn . LESSEQ expn [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
expn -> expn . EQUALS expn [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
expn -> expn . PLUS expn [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
expn -> expn . MINUS expn [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
expn -> expn . TIMES expn [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
expn -> expn TIMES expn . [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
expn -> expn . ANDALSO expn [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
expn -> expn . ORELSE expn [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
## Transitions:
## Reductions:
-- On TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO
--   reduce production expn -> expn TIMES expn

State 43:
## Known stack suffix:
## IF expn THEN
## LR(1) items:
expn -> IF expn THEN . expn ELSE expn [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
## Transitions:
-- On TRUE shift to state 30
-- On TEXT shift to state 31
-- On NUMBER shift to state 32
-- On NOT shift to state 33
-- On NAME shift to state 34
-- On LPAREN shift to state 37
-- On IF shift to state 38
-- On FALSE shift to state 39
-- On expn shift to state 44
## Reductions:

State 44:
## Known stack suffix:
## IF expn THEN expn
## LR(1) items:
expn -> expn . LESSEQ expn [ TIMES PLUS ORELSE MINUS LESSEQ EQUALS ELSE ANDALSO ]
expn -> expn . EQUALS expn [ TIMES PLUS ORELSE MINUS LESSEQ EQUALS ELSE ANDALSO ]
expn -> expn . PLUS expn [ TIMES PLUS ORELSE MINUS LESSEQ EQUALS ELSE ANDALSO ]
expn -> expn . MINUS expn [ TIMES PLUS ORELSE MINUS LESSEQ EQUALS ELSE ANDALSO ]
expn -> expn . TIMES expn [ TIMES PLUS ORELSE MINUS LESSEQ EQUALS ELSE ANDALSO ]
expn -> expn . ANDALSO expn [ TIMES PLUS ORELSE MINUS LESSEQ EQUALS ELSE ANDALSO ]
expn -> expn . ORELSE expn [ TIMES PLUS ORELSE MINUS LESSEQ EQUALS ELSE ANDALSO ]
expn -> IF expn THEN expn . ELSE expn [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
## Transitions:
-- On TIMES shift to state 41
-- On PLUS shift to state 45
-- On ORELSE shift to state 47
-- On MINUS shift to state 49
-- On LESSEQ shift to state 51
-- On EQUALS shift to state 53
-- On ELSE shift to state 57
-- On ANDALSO shift to state 55
## Reductions:

State 45:
## Known stack suffix:
## expn PLUS
## LR(1) items:
expn -> expn PLUS . expn [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
## Transitions:
-- On TRUE shift to state 30
-- On TEXT shift to state 31
-- On NUMBER shift to state 32
-- On NOT shift to state 33
-- On NAME shift to state 34
-- On LPAREN shift to state 37
-- On IF shift to state 38
-- On FALSE shift to state 39
-- On expn shift to state 46
## Reductions:

State 46:
## Known stack suffix:
## expn PLUS expn
## LR(1) items:
expn -> expn . LESSEQ expn [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
expn -> expn . EQUALS expn [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
expn -> expn . PLUS expn [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
expn -> expn PLUS expn . [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
expn -> expn . MINUS expn [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
expn -> expn . TIMES expn [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
expn -> expn . ANDALSO expn [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
expn -> expn . ORELSE expn [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
## Transitions:
-- On TIMES shift to state 41
## Reductions:
-- On THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO
--   reduce production expn -> expn PLUS expn

State 47:
## Known stack suffix:
## expn ORELSE
## LR(1) items:
expn -> expn ORELSE . expn [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
## Transitions:
-- On TRUE shift to state 30
-- On TEXT shift to state 31
-- On NUMBER shift to state 32
-- On NOT shift to state 33
-- On NAME shift to state 34
-- On LPAREN shift to state 37
-- On IF shift to state 38
-- On FALSE shift to state 39
-- On expn shift to state 48
## Reductions:

State 48:
## Known stack suffix:
## expn ORELSE expn
## LR(1) items:
expn -> expn . LESSEQ expn [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
expn -> expn . EQUALS expn [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
expn -> expn . PLUS expn [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
expn -> expn . MINUS expn [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
expn -> expn . TIMES expn [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
expn -> expn . ANDALSO expn [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
expn -> expn . ORELSE expn [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
expn -> expn ORELSE expn . [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
## Transitions:
-- On TIMES shift to state 41
-- On PLUS shift to state 45
-- On MINUS shift to state 49
-- On LESSEQ shift to state 51
-- On EQUALS shift to state 53
-- On ANDALSO shift to state 55
## Reductions:
-- On THEN SEMI RPAREN RARROW ORELSE HAN FUN EOF ELSE DO COMMA
--   reduce production expn -> expn ORELSE expn

State 49:
## Known stack suffix:
## expn MINUS
## LR(1) items:
expn -> expn MINUS . expn [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
## Transitions:
-- On TRUE shift to state 30
-- On TEXT shift to state 31
-- On NUMBER shift to state 32
-- On NOT shift to state 33
-- On NAME shift to state 34
-- On LPAREN shift to state 37
-- On IF shift to state 38
-- On FALSE shift to state 39
-- On expn shift to state 50
## Reductions:

State 50:
## Known stack suffix:
## expn MINUS expn
## LR(1) items:
expn -> expn . LESSEQ expn [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
expn -> expn . EQUALS expn [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
expn -> expn . PLUS expn [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
expn -> expn . MINUS expn [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
expn -> expn MINUS expn . [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
expn -> expn . TIMES expn [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
expn -> expn . ANDALSO expn [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
expn -> expn . ORELSE expn [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
## Transitions:
-- On TIMES shift to state 41
## Reductions:
-- On THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO
--   reduce production expn -> expn MINUS expn

State 51:
## Known stack suffix:
## expn LESSEQ
## LR(1) items:
expn -> expn LESSEQ . expn [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
## Transitions:
-- On TRUE shift to state 30
-- On TEXT shift to state 31
-- On NUMBER shift to state 32
-- On NOT shift to state 33
-- On NAME shift to state 34
-- On LPAREN shift to state 37
-- On IF shift to state 38
-- On FALSE shift to state 39
-- On expn shift to state 52
## Reductions:

State 52:
## Known stack suffix:
## expn LESSEQ expn
## LR(1) items:
expn -> expn . LESSEQ expn [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
expn -> expn LESSEQ expn . [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
expn -> expn . EQUALS expn [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
expn -> expn . PLUS expn [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
expn -> expn . MINUS expn [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
expn -> expn . TIMES expn [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
expn -> expn . ANDALSO expn [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
expn -> expn . ORELSE expn [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
## Transitions:
-- On TIMES shift to state 41
-- On PLUS shift to state 45
-- On MINUS shift to state 49
## Reductions:
-- On THEN SEMI RPAREN RARROW ORELSE LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO
--   reduce production expn -> expn LESSEQ expn

State 53:
## Known stack suffix:
## expn EQUALS
## LR(1) items:
expn -> expn EQUALS . expn [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
## Transitions:
-- On TRUE shift to state 30
-- On TEXT shift to state 31
-- On NUMBER shift to state 32
-- On NOT shift to state 33
-- On NAME shift to state 34
-- On LPAREN shift to state 37
-- On IF shift to state 38
-- On FALSE shift to state 39
-- On expn shift to state 54
## Reductions:

State 54:
## Known stack suffix:
## expn EQUALS expn
## LR(1) items:
expn -> expn . LESSEQ expn [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
expn -> expn . EQUALS expn [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
expn -> expn EQUALS expn . [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
expn -> expn . PLUS expn [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
expn -> expn . MINUS expn [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
expn -> expn . TIMES expn [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
expn -> expn . ANDALSO expn [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
expn -> expn . ORELSE expn [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
## Transitions:
-- On TIMES shift to state 41
-- On PLUS shift to state 45
-- On MINUS shift to state 49
## Reductions:
-- On THEN SEMI RPAREN RARROW ORELSE LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO
--   reduce production expn -> expn EQUALS expn

State 55:
## Known stack suffix:
## expn ANDALSO
## LR(1) items:
expn -> expn ANDALSO . expn [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
## Transitions:
-- On TRUE shift to state 30
-- On TEXT shift to state 31
-- On NUMBER shift to state 32
-- On NOT shift to state 33
-- On NAME shift to state 34
-- On LPAREN shift to state 37
-- On IF shift to state 38
-- On FALSE shift to state 39
-- On expn shift to state 56
## Reductions:

State 56:
## Known stack suffix:
## expn ANDALSO expn
## LR(1) items:
expn -> expn . LESSEQ expn [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
expn -> expn . EQUALS expn [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
expn -> expn . PLUS expn [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
expn -> expn . MINUS expn [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
expn -> expn . TIMES expn [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
expn -> expn . ANDALSO expn [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
expn -> expn ANDALSO expn . [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
expn -> expn . ORELSE expn [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
## Transitions:
-- On TIMES shift to state 41
-- On PLUS shift to state 45
-- On MINUS shift to state 49
-- On LESSEQ shift to state 51
-- On EQUALS shift to state 53
## Reductions:
-- On THEN SEMI RPAREN RARROW ORELSE HAN FUN EOF ELSE DO COMMA ANDALSO
--   reduce production expn -> expn ANDALSO expn

State 57:
## Known stack suffix:
## IF expn THEN expn ELSE
## LR(1) items:
expn -> IF expn THEN expn ELSE . expn [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
## Transitions:
-- On TRUE shift to state 30
-- On TEXT shift to state 31
-- On NUMBER shift to state 32
-- On NOT shift to state 33
-- On NAME shift to state 34
-- On LPAREN shift to state 37
-- On IF shift to state 38
-- On FALSE shift to state 39
-- On expn shift to state 58
## Reductions:

State 58:
## Known stack suffix:
## IF expn THEN expn ELSE expn
## LR(1) items:
expn -> expn . LESSEQ expn [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
expn -> expn . EQUALS expn [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
expn -> expn . PLUS expn [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
expn -> expn . MINUS expn [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
expn -> expn . TIMES expn [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
expn -> expn . ANDALSO expn [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
expn -> expn . ORELSE expn [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
expn -> IF expn THEN expn ELSE expn . [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
## Transitions:
-- On TIMES shift to state 41
-- On PLUS shift to state 45
-- On ORELSE shift to state 47
-- On MINUS shift to state 49
-- On LESSEQ shift to state 51
-- On EQUALS shift to state 53
-- On ANDALSO shift to state 55
## Reductions:
-- On THEN SEMI RPAREN RARROW HAN FUN EOF ELSE DO COMMA
--   reduce production expn -> IF expn THEN expn ELSE expn

State 59:
## Known stack suffix:
## LPAREN expn
## LR(1) items:
expn -> expn . LESSEQ expn [ TIMES RPAREN PLUS ORELSE MINUS LESSEQ EQUALS ANDALSO ]
expn -> expn . EQUALS expn [ TIMES RPAREN PLUS ORELSE MINUS LESSEQ EQUALS ANDALSO ]
expn -> expn . PLUS expn [ TIMES RPAREN PLUS ORELSE MINUS LESSEQ EQUALS ANDALSO ]
expn -> expn . MINUS expn [ TIMES RPAREN PLUS ORELSE MINUS LESSEQ EQUALS ANDALSO ]
expn -> expn . TIMES expn [ TIMES RPAREN PLUS ORELSE MINUS LESSEQ EQUALS ANDALSO ]
expn -> expn . ANDALSO expn [ TIMES RPAREN PLUS ORELSE MINUS LESSEQ EQUALS ANDALSO ]
expn -> expn . ORELSE expn [ TIMES RPAREN PLUS ORELSE MINUS LESSEQ EQUALS ANDALSO ]
expn -> LPAREN expn . RPAREN [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
## Transitions:
-- On TIMES shift to state 41
-- On RPAREN shift to state 60
-- On PLUS shift to state 45
-- On ORELSE shift to state 47
-- On MINUS shift to state 49
-- On LESSEQ shift to state 51
-- On EQUALS shift to state 53
-- On ANDALSO shift to state 55
## Reductions:

State 60:
## Known stack suffix:
## LPAREN expn RPAREN
## LR(1) items:
expn -> LPAREN expn RPAREN . [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
## Transitions:
## Reductions:
-- On TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO
--   reduce production expn -> LPAREN expn RPAREN

State 61:
## Known stack suffix:
## LPAREN expn
## LR(1) items:
expn -> expn . LESSEQ expn [ TIMES RPAREN PLUS ORELSE MINUS LESSEQ EQUALS COMMA ANDALSO ]
expn -> expn . EQUALS expn [ TIMES RPAREN PLUS ORELSE MINUS LESSEQ EQUALS COMMA ANDALSO ]
expn -> expn . PLUS expn [ TIMES RPAREN PLUS ORELSE MINUS LESSEQ EQUALS COMMA ANDALSO ]
expn -> expn . MINUS expn [ TIMES RPAREN PLUS ORELSE MINUS LESSEQ EQUALS COMMA ANDALSO ]
expn -> expn . TIMES expn [ TIMES RPAREN PLUS ORELSE MINUS LESSEQ EQUALS COMMA ANDALSO ]
expn -> expn . ANDALSO expn [ TIMES RPAREN PLUS ORELSE MINUS LESSEQ EQUALS COMMA ANDALSO ]
expn -> expn . ORELSE expn [ TIMES RPAREN PLUS ORELSE MINUS LESSEQ EQUALS COMMA ANDALSO ]
expns -> LPAREN expn . expnsc RPAREN [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
## Transitions:
-- On TIMES shift to state 41
-- On PLUS shift to state 45
-- On ORELSE shift to state 47
-- On MINUS shift to state 49
-- On LESSEQ shift to state 51
-- On EQUALS shift to state 53
-- On COMMA shift to state 62
-- On ANDALSO shift to state 55
-- On expnsc shift to state 65
## Reductions:
-- On RPAREN
--   reduce production expnsc ->

State 62:
## Known stack suffix:
## COMMA
## LR(1) items:
expnsc -> COMMA . expn expnsc [ RPAREN ]
## Transitions:
-- On TRUE shift to state 30
-- On TEXT shift to state 31
-- On NUMBER shift to state 32
-- On NOT shift to state 33
-- On NAME shift to state 34
-- On LPAREN shift to state 37
-- On IF shift to state 38
-- On FALSE shift to state 39
-- On expn shift to state 63
## Reductions:

State 63:
## Known stack suffix:
## COMMA expn
## LR(1) items:
expn -> expn . LESSEQ expn [ TIMES RPAREN PLUS ORELSE MINUS LESSEQ EQUALS COMMA ANDALSO ]
expn -> expn . EQUALS expn [ TIMES RPAREN PLUS ORELSE MINUS LESSEQ EQUALS COMMA ANDALSO ]
expn -> expn . PLUS expn [ TIMES RPAREN PLUS ORELSE MINUS LESSEQ EQUALS COMMA ANDALSO ]
expn -> expn . MINUS expn [ TIMES RPAREN PLUS ORELSE MINUS LESSEQ EQUALS COMMA ANDALSO ]
expn -> expn . TIMES expn [ TIMES RPAREN PLUS ORELSE MINUS LESSEQ EQUALS COMMA ANDALSO ]
expn -> expn . ANDALSO expn [ TIMES RPAREN PLUS ORELSE MINUS LESSEQ EQUALS COMMA ANDALSO ]
expn -> expn . ORELSE expn [ TIMES RPAREN PLUS ORELSE MINUS LESSEQ EQUALS COMMA ANDALSO ]
expnsc -> COMMA expn . expnsc [ RPAREN ]
## Transitions:
-- On TIMES shift to state 41
-- On PLUS shift to state 45
-- On ORELSE shift to state 47
-- On MINUS shift to state 49
-- On LESSEQ shift to state 51
-- On EQUALS shift to state 53
-- On COMMA shift to state 62
-- On ANDALSO shift to state 55
-- On expnsc shift to state 64
## Reductions:
-- On RPAREN
--   reduce production expnsc ->

State 64:
## Known stack suffix:
## COMMA expn expnsc
## LR(1) items:
expnsc -> COMMA expn expnsc . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production expnsc -> COMMA expn expnsc

State 65:
## Known stack suffix:
## LPAREN expn expnsc
## LR(1) items:
expns -> LPAREN expn expnsc . RPAREN [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
## Transitions:
-- On RPAREN shift to state 66
## Reductions:

State 66:
## Known stack suffix:
## LPAREN expn expnsc RPAREN
## LR(1) items:
expns -> LPAREN expn expnsc RPAREN . [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
## Transitions:
## Reductions:
-- On TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO
--   reduce production expns -> LPAREN expn expnsc RPAREN

State 67:
## Known stack suffix:
## NAME expns
## LR(1) items:
expn -> NAME expns . [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
## Transitions:
## Reductions:
-- On TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO
--   reduce production expn -> NAME expns

State 68:
## Known stack suffix:
## NOT expn
## LR(1) items:
expn -> expn . LESSEQ expn [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
expn -> expn . EQUALS expn [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
expn -> expn . PLUS expn [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
expn -> expn . MINUS expn [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
expn -> expn . TIMES expn [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
expn -> expn . ANDALSO expn [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
expn -> expn . ORELSE expn [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
expn -> NOT expn . [ TIMES THEN SEMI RPAREN RARROW PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ELSE DO COMMA ANDALSO ]
## Transitions:
-- On TIMES shift to state 41
-- On PLUS shift to state 45
-- On MINUS shift to state 49
-- On LESSEQ shift to state 51
-- On EQUALS shift to state 53
## Reductions:
-- On THEN SEMI RPAREN RARROW ORELSE HAN FUN EOF ELSE DO COMMA ANDALSO
--   reduce production expn -> NOT expn

State 69:
## Known stack suffix:
## WHEN expn
## LR(1) items:
expn -> expn . LESSEQ expn [ TIMES PLUS ORELSE MINUS LESSEQ EQUALS DO ANDALSO ]
expn -> expn . EQUALS expn [ TIMES PLUS ORELSE MINUS LESSEQ EQUALS DO ANDALSO ]
expn -> expn . PLUS expn [ TIMES PLUS ORELSE MINUS LESSEQ EQUALS DO ANDALSO ]
expn -> expn . MINUS expn [ TIMES PLUS ORELSE MINUS LESSEQ EQUALS DO ANDALSO ]
expn -> expn . TIMES expn [ TIMES PLUS ORELSE MINUS LESSEQ EQUALS DO ANDALSO ]
expn -> expn . ANDALSO expn [ TIMES PLUS ORELSE MINUS LESSEQ EQUALS DO ANDALSO ]
expn -> expn . ORELSE expn [ TIMES PLUS ORELSE MINUS LESSEQ EQUALS DO ANDALSO ]
stmt -> WHEN expn . DO blck OTHERWISE blck RBRACE [ RBRACE OTHERWISE HAN FUN EOF BAR ]
## Transitions:
-- On TIMES shift to state 41
-- On PLUS shift to state 45
-- On ORELSE shift to state 47
-- On MINUS shift to state 49
-- On LESSEQ shift to state 51
-- On EQUALS shift to state 53
-- On DO shift to state 70
-- On ANDALSO shift to state 55
## Reductions:

State 70:
## Known stack suffix:
## WHEN expn DO
## LR(1) items:
stmt -> WHEN expn DO . blck OTHERWISE blck RBRACE [ RBRACE OTHERWISE HAN FUN EOF BAR ]
## Transitions:
-- On LBRACE shift to state 28
-- On blck shift to state 71
## Reductions:

State 71:
## Known stack suffix:
## WHEN expn DO blck
## LR(1) items:
stmt -> WHEN expn DO blck . OTHERWISE blck RBRACE [ RBRACE OTHERWISE HAN FUN EOF BAR ]
## Transitions:
-- On OTHERWISE shift to state 72
## Reductions:

State 72:
## Known stack suffix:
## WHEN expn DO blck OTHERWISE
## LR(1) items:
stmt -> WHEN expn DO blck OTHERWISE . blck RBRACE [ RBRACE OTHERWISE HAN FUN EOF BAR ]
## Transitions:
-- On LBRACE shift to state 28
-- On blck shift to state 73
## Reductions:

State 73:
## Known stack suffix:
## WHEN expn DO blck OTHERWISE blck
## LR(1) items:
stmt -> WHEN expn DO blck OTHERWISE blck . RBRACE [ RBRACE OTHERWISE HAN FUN EOF BAR ]
## Transitions:
-- On RBRACE shift to state 74
## Reductions:

State 74:
## Known stack suffix:
## WHEN expn DO blck OTHERWISE blck RBRACE
## LR(1) items:
stmt -> WHEN expn DO blck OTHERWISE blck RBRACE . [ RBRACE OTHERWISE HAN FUN EOF BAR ]
## Transitions:
## Reductions:
-- On RBRACE OTHERWISE HAN FUN EOF BAR
--   reduce production stmt -> WHEN expn DO blck OTHERWISE blck RBRACE

State 75:
## Known stack suffix:
## STOP
## LR(1) items:
stmt -> STOP . SEMI RBRACE [ RBRACE OTHERWISE HAN FUN EOF BAR ]
## Transitions:
-- On SEMI shift to state 76
## Reductions:

State 76:
## Known stack suffix:
## STOP SEMI
## LR(1) items:
stmt -> STOP SEMI . RBRACE [ RBRACE OTHERWISE HAN FUN EOF BAR ]
## Transitions:
-- On RBRACE shift to state 77
## Reductions:

State 77:
## Known stack suffix:
## STOP SEMI RBRACE
## LR(1) items:
stmt -> STOP SEMI RBRACE . [ RBRACE OTHERWISE HAN FUN EOF BAR ]
## Transitions:
## Reductions:
-- On RBRACE OTHERWISE HAN FUN EOF BAR
--   reduce production stmt -> STOP SEMI RBRACE

State 78:
## Known stack suffix:
## START
## LR(1) items:
stmt -> START . hbndl NAME expns SEMI stmt [ RBRACE OTHERWISE HAN FUN EOF BAR ]
## Transitions:
-- On LANGLE shift to state 79
-- On hbndl shift to state 93
## Reductions:

State 79:
## Known stack suffix:
## LANGLE
## LR(1) items:
hbndl -> LANGLE . NAME hbndlc RANGLE [ NAME ]
hbndl -> LANGLE . CHA_CHING NAME hbndlc RANGLE [ NAME ]
## Transitions:
-- On NAME shift to state 80
-- On CHA_CHING shift to state 89
## Reductions:

State 80:
## Known stack suffix:
## LANGLE NAME
## LR(1) items:
hbndl -> LANGLE NAME . hbndlc RANGLE [ NAME ]
## Transitions:
-- On COMMA shift to state 81
-- On hbndlc shift to state 87
## Reductions:
-- On RANGLE
--   reduce production hbndlc ->

State 81:
## Known stack suffix:
## COMMA
## LR(1) items:
hbndlc -> COMMA . NAME hbndlc [ RANGLE ]
hbndlc -> COMMA . CHA_CHING NAME hbndlc [ RANGLE ]
## Transitions:
-- On NAME shift to state 82
-- On CHA_CHING shift to state 84
## Reductions:

State 82:
## Known stack suffix:
## COMMA NAME
## LR(1) items:
hbndlc -> COMMA NAME . hbndlc [ RANGLE ]
## Transitions:
-- On COMMA shift to state 81
-- On hbndlc shift to state 83
## Reductions:
-- On RANGLE
--   reduce production hbndlc ->

State 83:
## Known stack suffix:
## COMMA NAME hbndlc
## LR(1) items:
hbndlc -> COMMA NAME hbndlc . [ RANGLE ]
## Transitions:
## Reductions:
-- On RANGLE
--   reduce production hbndlc -> COMMA NAME hbndlc

State 84:
## Known stack suffix:
## COMMA CHA_CHING
## LR(1) items:
hbndlc -> COMMA CHA_CHING . NAME hbndlc [ RANGLE ]
## Transitions:
-- On NAME shift to state 85
## Reductions:

State 85:
## Known stack suffix:
## COMMA CHA_CHING NAME
## LR(1) items:
hbndlc -> COMMA CHA_CHING NAME . hbndlc [ RANGLE ]
## Transitions:
-- On COMMA shift to state 81
-- On hbndlc shift to state 86
## Reductions:
-- On RANGLE
--   reduce production hbndlc ->

State 86:
## Known stack suffix:
## COMMA CHA_CHING NAME hbndlc
## LR(1) items:
hbndlc -> COMMA CHA_CHING NAME hbndlc . [ RANGLE ]
## Transitions:
## Reductions:
-- On RANGLE
--   reduce production hbndlc -> COMMA CHA_CHING NAME hbndlc

State 87:
## Known stack suffix:
## LANGLE NAME hbndlc
## LR(1) items:
hbndl -> LANGLE NAME hbndlc . RANGLE [ NAME ]
## Transitions:
-- On RANGLE shift to state 88
## Reductions:

State 88:
## Known stack suffix:
## LANGLE NAME hbndlc RANGLE
## LR(1) items:
hbndl -> LANGLE NAME hbndlc RANGLE . [ NAME ]
## Transitions:
## Reductions:
-- On NAME
--   reduce production hbndl -> LANGLE NAME hbndlc RANGLE

State 89:
## Known stack suffix:
## LANGLE CHA_CHING
## LR(1) items:
hbndl -> LANGLE CHA_CHING . NAME hbndlc RANGLE [ NAME ]
## Transitions:
-- On NAME shift to state 90
## Reductions:

State 90:
## Known stack suffix:
## LANGLE CHA_CHING NAME
## LR(1) items:
hbndl -> LANGLE CHA_CHING NAME . hbndlc RANGLE [ NAME ]
## Transitions:
-- On COMMA shift to state 81
-- On hbndlc shift to state 91
## Reductions:
-- On RANGLE
--   reduce production hbndlc ->

State 91:
## Known stack suffix:
## LANGLE CHA_CHING NAME hbndlc
## LR(1) items:
hbndl -> LANGLE CHA_CHING NAME hbndlc . RANGLE [ NAME ]
## Transitions:
-- On RANGLE shift to state 92
## Reductions:

State 92:
## Known stack suffix:
## LANGLE CHA_CHING NAME hbndlc RANGLE
## LR(1) items:
hbndl -> LANGLE CHA_CHING NAME hbndlc RANGLE . [ NAME ]
## Transitions:
## Reductions:
-- On NAME
--   reduce production hbndl -> LANGLE CHA_CHING NAME hbndlc RANGLE

State 93:
## Known stack suffix:
## START hbndl
## LR(1) items:
stmt -> START hbndl . NAME expns SEMI stmt [ RBRACE OTHERWISE HAN FUN EOF BAR ]
## Transitions:
-- On NAME shift to state 94
## Reductions:

State 94:
## Known stack suffix:
## START hbndl NAME
## LR(1) items:
stmt -> START hbndl NAME . expns SEMI stmt [ RBRACE OTHERWISE HAN FUN EOF BAR ]
## Transitions:
-- On LPAREN shift to state 35
-- On expns shift to state 95
## Reductions:

State 95:
## Known stack suffix:
## START hbndl NAME expns
## LR(1) items:
stmt -> START hbndl NAME expns . SEMI stmt [ RBRACE OTHERWISE HAN FUN EOF BAR ]
## Transitions:
-- On SEMI shift to state 96
## Reductions:

State 96:
## Known stack suffix:
## START hbndl NAME expns SEMI
## LR(1) items:
stmt -> START hbndl NAME expns SEMI . stmt [ RBRACE OTHERWISE HAN FUN EOF BAR ]
## Transitions:
-- On WHEN shift to state 29
-- On STOP shift to state 75
-- On START shift to state 78
-- On SEND shift to state 97
-- On SELECT shift to state 102
-- On RECEIVE shift to state 107
-- On OPEN shift to state 114
-- On NOW shift to state 119
-- On LET shift to state 125
-- On HANDLE shift to state 130
-- On CLOSE shift to state 142
-- On AWAIT shift to state 145
-- On stmt shift to state 160
## Reductions:

State 97:
## Known stack suffix:
## SEND
## LR(1) items:
stmt -> SEND . expn RARROW NAME SEMI stmt [ RBRACE OTHERWISE HAN FUN EOF BAR ]
## Transitions:
-- On TRUE shift to state 30
-- On TEXT shift to state 31
-- On NUMBER shift to state 32
-- On NOT shift to state 33
-- On NAME shift to state 34
-- On LPAREN shift to state 37
-- On IF shift to state 38
-- On FALSE shift to state 39
-- On expn shift to state 98
## Reductions:

State 98:
## Known stack suffix:
## SEND expn
## LR(1) items:
expn -> expn . LESSEQ expn [ TIMES RARROW PLUS ORELSE MINUS LESSEQ EQUALS ANDALSO ]
expn -> expn . EQUALS expn [ TIMES RARROW PLUS ORELSE MINUS LESSEQ EQUALS ANDALSO ]
expn -> expn . PLUS expn [ TIMES RARROW PLUS ORELSE MINUS LESSEQ EQUALS ANDALSO ]
expn -> expn . MINUS expn [ TIMES RARROW PLUS ORELSE MINUS LESSEQ EQUALS ANDALSO ]
expn -> expn . TIMES expn [ TIMES RARROW PLUS ORELSE MINUS LESSEQ EQUALS ANDALSO ]
expn -> expn . ANDALSO expn [ TIMES RARROW PLUS ORELSE MINUS LESSEQ EQUALS ANDALSO ]
expn -> expn . ORELSE expn [ TIMES RARROW PLUS ORELSE MINUS LESSEQ EQUALS ANDALSO ]
stmt -> SEND expn . RARROW NAME SEMI stmt [ RBRACE OTHERWISE HAN FUN EOF BAR ]
## Transitions:
-- On TIMES shift to state 41
-- On RARROW shift to state 99
-- On PLUS shift to state 45
-- On ORELSE shift to state 47
-- On MINUS shift to state 49
-- On LESSEQ shift to state 51
-- On EQUALS shift to state 53
-- On ANDALSO shift to state 55
## Reductions:

State 99:
## Known stack suffix:
## SEND expn RARROW
## LR(1) items:
stmt -> SEND expn RARROW . NAME SEMI stmt [ RBRACE OTHERWISE HAN FUN EOF BAR ]
## Transitions:
-- On NAME shift to state 100
## Reductions:

State 100:
## Known stack suffix:
## SEND expn RARROW NAME
## LR(1) items:
stmt -> SEND expn RARROW NAME . SEMI stmt [ RBRACE OTHERWISE HAN FUN EOF BAR ]
## Transitions:
-- On SEMI shift to state 101
## Reductions:

State 101:
## Known stack suffix:
## SEND expn RARROW NAME SEMI
## LR(1) items:
stmt -> SEND expn RARROW NAME SEMI . stmt [ RBRACE OTHERWISE HAN FUN EOF BAR ]
## Transitions:
-- On WHEN shift to state 29
-- On STOP shift to state 75
-- On START shift to state 78
-- On SEND shift to state 97
-- On SELECT shift to state 102
-- On RECEIVE shift to state 107
-- On OPEN shift to state 114
-- On NOW shift to state 119
-- On LET shift to state 125
-- On HANDLE shift to state 130
-- On CLOSE shift to state 142
-- On AWAIT shift to state 145
-- On stmt shift to state 159
## Reductions:

State 102:
## Known stack suffix:
## SELECT
## LR(1) items:
stmt -> SELECT . NAME RARROW NAME SEMI stmt [ RBRACE OTHERWISE HAN FUN EOF BAR ]
stmt -> SELECT . NAME expns RARROW NAME SEMI stmt [ RBRACE OTHERWISE HAN FUN EOF BAR ]
## Transitions:
-- On NAME shift to state 103
## Reductions:

State 103:
## Known stack suffix:
## SELECT NAME
## LR(1) items:
stmt -> SELECT NAME . RARROW NAME SEMI stmt [ RBRACE OTHERWISE HAN FUN EOF BAR ]
stmt -> SELECT NAME . expns RARROW NAME SEMI stmt [ RBRACE OTHERWISE HAN FUN EOF BAR ]
## Transitions:
-- On RARROW shift to state 104
-- On LPAREN shift to state 35
-- On expns shift to state 154
## Reductions:

State 104:
## Known stack suffix:
## SELECT NAME RARROW
## LR(1) items:
stmt -> SELECT NAME RARROW . NAME SEMI stmt [ RBRACE OTHERWISE HAN FUN EOF BAR ]
## Transitions:
-- On NAME shift to state 105
## Reductions:

State 105:
## Known stack suffix:
## SELECT NAME RARROW NAME
## LR(1) items:
stmt -> SELECT NAME RARROW NAME . SEMI stmt [ RBRACE OTHERWISE HAN FUN EOF BAR ]
## Transitions:
-- On SEMI shift to state 106
## Reductions:

State 106:
## Known stack suffix:
## SELECT NAME RARROW NAME SEMI
## LR(1) items:
stmt -> SELECT NAME RARROW NAME SEMI . stmt [ RBRACE OTHERWISE HAN FUN EOF BAR ]
## Transitions:
-- On WHEN shift to state 29
-- On STOP shift to state 75
-- On START shift to state 78
-- On SEND shift to state 97
-- On SELECT shift to state 102
-- On RECEIVE shift to state 107
-- On OPEN shift to state 114
-- On NOW shift to state 119
-- On LET shift to state 125
-- On HANDLE shift to state 130
-- On CLOSE shift to state 142
-- On AWAIT shift to state 145
-- On stmt shift to state 153
## Reductions:

State 107:
## Known stack suffix:
## RECEIVE
## LR(1) items:
stmt -> RECEIVE . NAME COLON vtyp LARROW NAME SEMI stmt [ RBRACE OTHERWISE HAN FUN EOF BAR ]
## Transitions:
-- On NAME shift to state 108
## Reductions:

State 108:
## Known stack suffix:
## RECEIVE NAME
## LR(1) items:
stmt -> RECEIVE NAME . COLON vtyp LARROW NAME SEMI stmt [ RBRACE OTHERWISE HAN FUN EOF BAR ]
## Transitions:
-- On COLON shift to state 109
## Reductions:

State 109:
## Known stack suffix:
## RECEIVE NAME COLON
## LR(1) items:
stmt -> RECEIVE NAME COLON . vtyp LARROW NAME SEMI stmt [ RBRACE OTHERWISE HAN FUN EOF BAR ]
## Transitions:
-- On UNIT shift to state 15
-- On STRING shift to state 16
-- On INT shift to state 17
-- On BOOL shift to state 18
-- On vtyp shift to state 110
## Reductions:

State 110:
## Known stack suffix:
## RECEIVE NAME COLON vtyp
## LR(1) items:
stmt -> RECEIVE NAME COLON vtyp . LARROW NAME SEMI stmt [ RBRACE OTHERWISE HAN FUN EOF BAR ]
## Transitions:
-- On LARROW shift to state 111
## Reductions:

State 111:
## Known stack suffix:
## RECEIVE NAME COLON vtyp LARROW
## LR(1) items:
stmt -> RECEIVE NAME COLON vtyp LARROW . NAME SEMI stmt [ RBRACE OTHERWISE HAN FUN EOF BAR ]
## Transitions:
-- On NAME shift to state 112
## Reductions:

State 112:
## Known stack suffix:
## RECEIVE NAME COLON vtyp LARROW NAME
## LR(1) items:
stmt -> RECEIVE NAME COLON vtyp LARROW NAME . SEMI stmt [ RBRACE OTHERWISE HAN FUN EOF BAR ]
## Transitions:
-- On SEMI shift to state 113
## Reductions:

State 113:
## Known stack suffix:
## RECEIVE NAME COLON vtyp LARROW NAME SEMI
## LR(1) items:
stmt -> RECEIVE NAME COLON vtyp LARROW NAME SEMI . stmt [ RBRACE OTHERWISE HAN FUN EOF BAR ]
## Transitions:
-- On WHEN shift to state 29
-- On STOP shift to state 75
-- On START shift to state 78
-- On SEND shift to state 97
-- On SELECT shift to state 102
-- On RECEIVE shift to state 107
-- On OPEN shift to state 114
-- On NOW shift to state 119
-- On LET shift to state 125
-- On HANDLE shift to state 130
-- On CLOSE shift to state 142
-- On AWAIT shift to state 145
-- On stmt shift to state 152
## Reductions:

State 114:
## Known stack suffix:
## OPEN
## LR(1) items:
stmt -> OPEN . NAME LRARROW NAME SEMI stmt [ RBRACE OTHERWISE HAN FUN EOF BAR ]
## Transitions:
-- On NAME shift to state 115
## Reductions:

State 115:
## Known stack suffix:
## OPEN NAME
## LR(1) items:
stmt -> OPEN NAME . LRARROW NAME SEMI stmt [ RBRACE OTHERWISE HAN FUN EOF BAR ]
## Transitions:
-- On LRARROW shift to state 116
## Reductions:

State 116:
## Known stack suffix:
## OPEN NAME LRARROW
## LR(1) items:
stmt -> OPEN NAME LRARROW . NAME SEMI stmt [ RBRACE OTHERWISE HAN FUN EOF BAR ]
## Transitions:
-- On NAME shift to state 117
## Reductions:

State 117:
## Known stack suffix:
## OPEN NAME LRARROW NAME
## LR(1) items:
stmt -> OPEN NAME LRARROW NAME . SEMI stmt [ RBRACE OTHERWISE HAN FUN EOF BAR ]
## Transitions:
-- On SEMI shift to state 118
## Reductions:

State 118:
## Known stack suffix:
## OPEN NAME LRARROW NAME SEMI
## LR(1) items:
stmt -> OPEN NAME LRARROW NAME SEMI . stmt [ RBRACE OTHERWISE HAN FUN EOF BAR ]
## Transitions:
-- On WHEN shift to state 29
-- On STOP shift to state 75
-- On START shift to state 78
-- On SEND shift to state 97
-- On SELECT shift to state 102
-- On RECEIVE shift to state 107
-- On OPEN shift to state 114
-- On NOW shift to state 119
-- On LET shift to state 125
-- On HANDLE shift to state 130
-- On CLOSE shift to state 142
-- On AWAIT shift to state 145
-- On stmt shift to state 151
## Reductions:

State 119:
## Known stack suffix:
## NOW
## LR(1) items:
stmt -> NOW . bndl NAME expns SEMI RBRACE [ RBRACE OTHERWISE HAN FUN EOF BAR ]
## Transitions:
-- On LANGLE shift to state 2
-- On bndl shift to state 120
## Reductions:

State 120:
## Known stack suffix:
## NOW bndl
## LR(1) items:
stmt -> NOW bndl . NAME expns SEMI RBRACE [ RBRACE OTHERWISE HAN FUN EOF BAR ]
## Transitions:
-- On NAME shift to state 121
## Reductions:

State 121:
## Known stack suffix:
## NOW bndl NAME
## LR(1) items:
stmt -> NOW bndl NAME . expns SEMI RBRACE [ RBRACE OTHERWISE HAN FUN EOF BAR ]
## Transitions:
-- On LPAREN shift to state 35
-- On expns shift to state 122
## Reductions:

State 122:
## Known stack suffix:
## NOW bndl NAME expns
## LR(1) items:
stmt -> NOW bndl NAME expns . SEMI RBRACE [ RBRACE OTHERWISE HAN FUN EOF BAR ]
## Transitions:
-- On SEMI shift to state 123
## Reductions:

State 123:
## Known stack suffix:
## NOW bndl NAME expns SEMI
## LR(1) items:
stmt -> NOW bndl NAME expns SEMI . RBRACE [ RBRACE OTHERWISE HAN FUN EOF BAR ]
## Transitions:
-- On RBRACE shift to state 124
## Reductions:

State 124:
## Known stack suffix:
## NOW bndl NAME expns SEMI RBRACE
## LR(1) items:
stmt -> NOW bndl NAME expns SEMI RBRACE . [ RBRACE OTHERWISE HAN FUN EOF BAR ]
## Transitions:
## Reductions:
-- On RBRACE OTHERWISE HAN FUN EOF BAR
--   reduce production stmt -> NOW bndl NAME expns SEMI RBRACE

State 125:
## Known stack suffix:
## LET
## LR(1) items:
stmt -> LET . NAME ASSIGN expn SEMI stmt [ RBRACE OTHERWISE HAN FUN EOF BAR ]
## Transitions:
-- On NAME shift to state 126
## Reductions:

State 126:
## Known stack suffix:
## LET NAME
## LR(1) items:
stmt -> LET NAME . ASSIGN expn SEMI stmt [ RBRACE OTHERWISE HAN FUN EOF BAR ]
## Transitions:
-- On ASSIGN shift to state 127
## Reductions:

State 127:
## Known stack suffix:
## LET NAME ASSIGN
## LR(1) items:
stmt -> LET NAME ASSIGN . expn SEMI stmt [ RBRACE OTHERWISE HAN FUN EOF BAR ]
## Transitions:
-- On TRUE shift to state 30
-- On TEXT shift to state 31
-- On NUMBER shift to state 32
-- On NOT shift to state 33
-- On NAME shift to state 34
-- On LPAREN shift to state 37
-- On IF shift to state 38
-- On FALSE shift to state 39
-- On expn shift to state 128
## Reductions:

State 128:
## Known stack suffix:
## LET NAME ASSIGN expn
## LR(1) items:
expn -> expn . LESSEQ expn [ TIMES SEMI PLUS ORELSE MINUS LESSEQ EQUALS ANDALSO ]
expn -> expn . EQUALS expn [ TIMES SEMI PLUS ORELSE MINUS LESSEQ EQUALS ANDALSO ]
expn -> expn . PLUS expn [ TIMES SEMI PLUS ORELSE MINUS LESSEQ EQUALS ANDALSO ]
expn -> expn . MINUS expn [ TIMES SEMI PLUS ORELSE MINUS LESSEQ EQUALS ANDALSO ]
expn -> expn . TIMES expn [ TIMES SEMI PLUS ORELSE MINUS LESSEQ EQUALS ANDALSO ]
expn -> expn . ANDALSO expn [ TIMES SEMI PLUS ORELSE MINUS LESSEQ EQUALS ANDALSO ]
expn -> expn . ORELSE expn [ TIMES SEMI PLUS ORELSE MINUS LESSEQ EQUALS ANDALSO ]
stmt -> LET NAME ASSIGN expn . SEMI stmt [ RBRACE OTHERWISE HAN FUN EOF BAR ]
## Transitions:
-- On TIMES shift to state 41
-- On SEMI shift to state 129
-- On PLUS shift to state 45
-- On ORELSE shift to state 47
-- On MINUS shift to state 49
-- On LESSEQ shift to state 51
-- On EQUALS shift to state 53
-- On ANDALSO shift to state 55
## Reductions:

State 129:
## Known stack suffix:
## LET NAME ASSIGN expn SEMI
## LR(1) items:
stmt -> LET NAME ASSIGN expn SEMI . stmt [ RBRACE OTHERWISE HAN FUN EOF BAR ]
## Transitions:
-- On WHEN shift to state 29
-- On STOP shift to state 75
-- On START shift to state 78
-- On SEND shift to state 97
-- On SELECT shift to state 102
-- On RECEIVE shift to state 107
-- On OPEN shift to state 114
-- On NOW shift to state 119
-- On LET shift to state 125
-- On HANDLE shift to state 130
-- On CLOSE shift to state 142
-- On AWAIT shift to state 145
-- On stmt shift to state 150
## Reductions:

State 130:
## Known stack suffix:
## HANDLE
## LR(1) items:
stmt -> HANDLE . NAME OF LBRACE cases RBRACE RBRACE [ RBRACE OTHERWISE HAN FUN EOF BAR ]
## Transitions:
-- On NAME shift to state 131
## Reductions:

State 131:
## Known stack suffix:
## HANDLE NAME
## LR(1) items:
stmt -> HANDLE NAME . OF LBRACE cases RBRACE RBRACE [ RBRACE OTHERWISE HAN FUN EOF BAR ]
## Transitions:
-- On OF shift to state 132
## Reductions:

State 132:
## Known stack suffix:
## HANDLE NAME OF
## LR(1) items:
stmt -> HANDLE NAME OF . LBRACE cases RBRACE RBRACE [ RBRACE OTHERWISE HAN FUN EOF BAR ]
## Transitions:
-- On LBRACE shift to state 133
## Reductions:

State 133:
## Known stack suffix:
## HANDLE NAME OF LBRACE
## LR(1) items:
stmt -> HANDLE NAME OF LBRACE . cases RBRACE RBRACE [ RBRACE OTHERWISE HAN FUN EOF BAR ]
## Transitions:
-- On BAR shift to state 134
-- On cases shift to state 139
## Reductions:
-- On RBRACE
--   reduce production cases ->

State 134:
## Known stack suffix:
## BAR
## LR(1) items:
cases -> BAR . NAME RARROW blck cases [ RBRACE ]
## Transitions:
-- On NAME shift to state 135
## Reductions:

State 135:
## Known stack suffix:
## BAR NAME
## LR(1) items:
cases -> BAR NAME . RARROW blck cases [ RBRACE ]
## Transitions:
-- On RARROW shift to state 136
## Reductions:

State 136:
## Known stack suffix:
## BAR NAME RARROW
## LR(1) items:
cases -> BAR NAME RARROW . blck cases [ RBRACE ]
## Transitions:
-- On LBRACE shift to state 28
-- On blck shift to state 137
## Reductions:

State 137:
## Known stack suffix:
## BAR NAME RARROW blck
## LR(1) items:
cases -> BAR NAME RARROW blck . cases [ RBRACE ]
## Transitions:
-- On BAR shift to state 134
-- On cases shift to state 138
## Reductions:
-- On RBRACE
--   reduce production cases ->

State 138:
## Known stack suffix:
## BAR NAME RARROW blck cases
## LR(1) items:
cases -> BAR NAME RARROW blck cases . [ RBRACE ]
## Transitions:
## Reductions:
-- On RBRACE
--   reduce production cases -> BAR NAME RARROW blck cases

State 139:
## Known stack suffix:
## HANDLE NAME OF LBRACE cases
## LR(1) items:
stmt -> HANDLE NAME OF LBRACE cases . RBRACE RBRACE [ RBRACE OTHERWISE HAN FUN EOF BAR ]
## Transitions:
-- On RBRACE shift to state 140
## Reductions:

State 140:
## Known stack suffix:
## HANDLE NAME OF LBRACE cases RBRACE
## LR(1) items:
stmt -> HANDLE NAME OF LBRACE cases RBRACE . RBRACE [ RBRACE OTHERWISE HAN FUN EOF BAR ]
## Transitions:
-- On RBRACE shift to state 141
## Reductions:

State 141:
## Known stack suffix:
## HANDLE NAME OF LBRACE cases RBRACE RBRACE
## LR(1) items:
stmt -> HANDLE NAME OF LBRACE cases RBRACE RBRACE . [ RBRACE OTHERWISE HAN FUN EOF BAR ]
## Transitions:
## Reductions:
-- On RBRACE OTHERWISE HAN FUN EOF BAR
--   reduce production stmt -> HANDLE NAME OF LBRACE cases RBRACE RBRACE

State 142:
## Known stack suffix:
## CLOSE
## LR(1) items:
stmt -> CLOSE . NAME SEMI stmt [ RBRACE OTHERWISE HAN FUN EOF BAR ]
## Transitions:
-- On NAME shift to state 143
## Reductions:

State 143:
## Known stack suffix:
## CLOSE NAME
## LR(1) items:
stmt -> CLOSE NAME . SEMI stmt [ RBRACE OTHERWISE HAN FUN EOF BAR ]
## Transitions:
-- On SEMI shift to state 144
## Reductions:

State 144:
## Known stack suffix:
## CLOSE NAME SEMI
## LR(1) items:
stmt -> CLOSE NAME SEMI . stmt [ RBRACE OTHERWISE HAN FUN EOF BAR ]
## Transitions:
-- On WHEN shift to state 29
-- On STOP shift to state 75
-- On START shift to state 78
-- On SEND shift to state 97
-- On SELECT shift to state 102
-- On RECEIVE shift to state 107
-- On OPEN shift to state 114
-- On NOW shift to state 119
-- On LET shift to state 125
-- On HANDLE shift to state 130
-- On CLOSE shift to state 142
-- On AWAIT shift to state 145
-- On stmt shift to state 149
## Reductions:

State 145:
## Known stack suffix:
## AWAIT
## LR(1) items:
stmt -> AWAIT . NAME SEMI stmt [ RBRACE OTHERWISE HAN FUN EOF BAR ]
## Transitions:
-- On NAME shift to state 146
## Reductions:

State 146:
## Known stack suffix:
## AWAIT NAME
## LR(1) items:
stmt -> AWAIT NAME . SEMI stmt [ RBRACE OTHERWISE HAN FUN EOF BAR ]
## Transitions:
-- On SEMI shift to state 147
## Reductions:

State 147:
## Known stack suffix:
## AWAIT NAME SEMI
## LR(1) items:
stmt -> AWAIT NAME SEMI . stmt [ RBRACE OTHERWISE HAN FUN EOF BAR ]
## Transitions:
-- On WHEN shift to state 29
-- On STOP shift to state 75
-- On START shift to state 78
-- On SEND shift to state 97
-- On SELECT shift to state 102
-- On RECEIVE shift to state 107
-- On OPEN shift to state 114
-- On NOW shift to state 119
-- On LET shift to state 125
-- On HANDLE shift to state 130
-- On CLOSE shift to state 142
-- On AWAIT shift to state 145
-- On stmt shift to state 148
## Reductions:

State 148:
## Known stack suffix:
## AWAIT NAME SEMI stmt
## LR(1) items:
stmt -> AWAIT NAME SEMI stmt . [ RBRACE OTHERWISE HAN FUN EOF BAR ]
## Transitions:
## Reductions:
-- On RBRACE OTHERWISE HAN FUN EOF BAR
--   reduce production stmt -> AWAIT NAME SEMI stmt

State 149:
## Known stack suffix:
## CLOSE NAME SEMI stmt
## LR(1) items:
stmt -> CLOSE NAME SEMI stmt . [ RBRACE OTHERWISE HAN FUN EOF BAR ]
## Transitions:
## Reductions:
-- On RBRACE OTHERWISE HAN FUN EOF BAR
--   reduce production stmt -> CLOSE NAME SEMI stmt

State 150:
## Known stack suffix:
## LET NAME ASSIGN expn SEMI stmt
## LR(1) items:
stmt -> LET NAME ASSIGN expn SEMI stmt . [ RBRACE OTHERWISE HAN FUN EOF BAR ]
## Transitions:
## Reductions:
-- On RBRACE OTHERWISE HAN FUN EOF BAR
--   reduce production stmt -> LET NAME ASSIGN expn SEMI stmt

State 151:
## Known stack suffix:
## OPEN NAME LRARROW NAME SEMI stmt
## LR(1) items:
stmt -> OPEN NAME LRARROW NAME SEMI stmt . [ RBRACE OTHERWISE HAN FUN EOF BAR ]
## Transitions:
## Reductions:
-- On RBRACE OTHERWISE HAN FUN EOF BAR
--   reduce production stmt -> OPEN NAME LRARROW NAME SEMI stmt

State 152:
## Known stack suffix:
## RECEIVE NAME COLON vtyp LARROW NAME SEMI stmt
## LR(1) items:
stmt -> RECEIVE NAME COLON vtyp LARROW NAME SEMI stmt . [ RBRACE OTHERWISE HAN FUN EOF BAR ]
## Transitions:
## Reductions:
-- On RBRACE OTHERWISE HAN FUN EOF BAR
--   reduce production stmt -> RECEIVE NAME COLON vtyp LARROW NAME SEMI stmt

State 153:
## Known stack suffix:
## SELECT NAME RARROW NAME SEMI stmt
## LR(1) items:
stmt -> SELECT NAME RARROW NAME SEMI stmt . [ RBRACE OTHERWISE HAN FUN EOF BAR ]
## Transitions:
## Reductions:
-- On RBRACE OTHERWISE HAN FUN EOF BAR
--   reduce production stmt -> SELECT NAME RARROW NAME SEMI stmt

State 154:
## Known stack suffix:
## SELECT NAME expns
## LR(1) items:
stmt -> SELECT NAME expns . RARROW NAME SEMI stmt [ RBRACE OTHERWISE HAN FUN EOF BAR ]
## Transitions:
-- On RARROW shift to state 155
## Reductions:

State 155:
## Known stack suffix:
## SELECT NAME expns RARROW
## LR(1) items:
stmt -> SELECT NAME expns RARROW . NAME SEMI stmt [ RBRACE OTHERWISE HAN FUN EOF BAR ]
## Transitions:
-- On NAME shift to state 156
## Reductions:

State 156:
## Known stack suffix:
## SELECT NAME expns RARROW NAME
## LR(1) items:
stmt -> SELECT NAME expns RARROW NAME . SEMI stmt [ RBRACE OTHERWISE HAN FUN EOF BAR ]
## Transitions:
-- On SEMI shift to state 157
## Reductions:

State 157:
## Known stack suffix:
## SELECT NAME expns RARROW NAME SEMI
## LR(1) items:
stmt -> SELECT NAME expns RARROW NAME SEMI . stmt [ RBRACE OTHERWISE HAN FUN EOF BAR ]
## Transitions:
-- On WHEN shift to state 29
-- On STOP shift to state 75
-- On START shift to state 78
-- On SEND shift to state 97
-- On SELECT shift to state 102
-- On RECEIVE shift to state 107
-- On OPEN shift to state 114
-- On NOW shift to state 119
-- On LET shift to state 125
-- On HANDLE shift to state 130
-- On CLOSE shift to state 142
-- On AWAIT shift to state 145
-- On stmt shift to state 158
## Reductions:

State 158:
## Known stack suffix:
## SELECT NAME expns RARROW NAME SEMI stmt
## LR(1) items:
stmt -> SELECT NAME expns RARROW NAME SEMI stmt . [ RBRACE OTHERWISE HAN FUN EOF BAR ]
## Transitions:
## Reductions:
-- On RBRACE OTHERWISE HAN FUN EOF BAR
--   reduce production stmt -> SELECT NAME expns RARROW NAME SEMI stmt

State 159:
## Known stack suffix:
## SEND expn RARROW NAME SEMI stmt
## LR(1) items:
stmt -> SEND expn RARROW NAME SEMI stmt . [ RBRACE OTHERWISE HAN FUN EOF BAR ]
## Transitions:
## Reductions:
-- On RBRACE OTHERWISE HAN FUN EOF BAR
--   reduce production stmt -> SEND expn RARROW NAME SEMI stmt

State 160:
## Known stack suffix:
## START hbndl NAME expns SEMI stmt
## LR(1) items:
stmt -> START hbndl NAME expns SEMI stmt . [ RBRACE OTHERWISE HAN FUN EOF BAR ]
## Transitions:
## Reductions:
-- On RBRACE OTHERWISE HAN FUN EOF BAR
--   reduce production stmt -> START hbndl NAME expns SEMI stmt

State 161:
## Known stack suffix:
## LBRACE stmt
## LR(1) items:
blck -> LBRACE stmt . [ RBRACE OTHERWISE HAN FUN EOF BAR ]
## Transitions:
## Reductions:
-- On RBRACE OTHERWISE HAN FUN EOF BAR
--   reduce production blck -> LBRACE stmt

State 162:
## Known stack suffix:
## HAN bndl NAME prms blck
## LR(1) items:
decls -> HAN bndl NAME prms blck . decls [ EOF ]
## Transitions:
-- On HAN shift to state 1
-- On FUN shift to state 163
-- On decls shift to state 171
## Reductions:
-- On EOF
--   reduce production decls ->

State 163:
## Known stack suffix:
## FUN
## LR(1) items:
decls -> FUN . NAME prms COLON vtyp EQUALS expn decls [ EOF ]
## Transitions:
-- On NAME shift to state 164
## Reductions:

State 164:
## Known stack suffix:
## FUN NAME
## LR(1) items:
decls -> FUN NAME . prms COLON vtyp EQUALS expn decls [ EOF ]
## Transitions:
-- On LPAREN shift to state 11
-- On prms shift to state 165
## Reductions:

State 165:
## Known stack suffix:
## FUN NAME prms
## LR(1) items:
decls -> FUN NAME prms . COLON vtyp EQUALS expn decls [ EOF ]
## Transitions:
-- On COLON shift to state 166
## Reductions:

State 166:
## Known stack suffix:
## FUN NAME prms COLON
## LR(1) items:
decls -> FUN NAME prms COLON . vtyp EQUALS expn decls [ EOF ]
## Transitions:
-- On UNIT shift to state 15
-- On STRING shift to state 16
-- On INT shift to state 17
-- On BOOL shift to state 18
-- On vtyp shift to state 167
## Reductions:

State 167:
## Known stack suffix:
## FUN NAME prms COLON vtyp
## LR(1) items:
decls -> FUN NAME prms COLON vtyp . EQUALS expn decls [ EOF ]
## Transitions:
-- On EQUALS shift to state 168
## Reductions:

State 168:
## Known stack suffix:
## FUN NAME prms COLON vtyp EQUALS
## LR(1) items:
decls -> FUN NAME prms COLON vtyp EQUALS . expn decls [ EOF ]
## Transitions:
-- On TRUE shift to state 30
-- On TEXT shift to state 31
-- On NUMBER shift to state 32
-- On NOT shift to state 33
-- On NAME shift to state 34
-- On LPAREN shift to state 37
-- On IF shift to state 38
-- On FALSE shift to state 39
-- On expn shift to state 169
## Reductions:

State 169:
## Known stack suffix:
## FUN NAME prms COLON vtyp EQUALS expn
## LR(1) items:
decls -> FUN NAME prms COLON vtyp EQUALS expn . decls [ EOF ]
expn -> expn . LESSEQ expn [ TIMES PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ANDALSO ]
expn -> expn . EQUALS expn [ TIMES PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ANDALSO ]
expn -> expn . PLUS expn [ TIMES PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ANDALSO ]
expn -> expn . MINUS expn [ TIMES PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ANDALSO ]
expn -> expn . TIMES expn [ TIMES PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ANDALSO ]
expn -> expn . ANDALSO expn [ TIMES PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ANDALSO ]
expn -> expn . ORELSE expn [ TIMES PLUS ORELSE MINUS LESSEQ HAN FUN EQUALS EOF ANDALSO ]
## Transitions:
-- On TIMES shift to state 41
-- On PLUS shift to state 45
-- On ORELSE shift to state 47
-- On MINUS shift to state 49
-- On LESSEQ shift to state 51
-- On HAN shift to state 1
-- On FUN shift to state 163
-- On EQUALS shift to state 53
-- On ANDALSO shift to state 55
-- On decls shift to state 170
## Reductions:
-- On EOF
--   reduce production decls ->

State 170:
## Known stack suffix:
## FUN NAME prms COLON vtyp EQUALS expn decls
## LR(1) items:
decls -> FUN NAME prms COLON vtyp EQUALS expn decls . [ EOF ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production decls -> FUN NAME prms COLON vtyp EQUALS expn decls

State 171:
## Known stack suffix:
## HAN bndl NAME prms blck decls
## LR(1) items:
decls -> HAN bndl NAME prms blck decls . [ EOF ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production decls -> HAN bndl NAME prms blck decls

State 172:
## Known stack suffix:
## prgm
## LR(1) items:
prgm' -> prgm . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept prgm

State 173:
## Known stack suffix:
## decls
## LR(1) items:
prgm -> decls . EOF [ # ]
## Transitions:
-- On EOF shift to state 174
## Reductions:

State 174:
## Known stack suffix:
## decls EOF
## LR(1) items:
prgm -> decls EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production prgm -> decls EOF

